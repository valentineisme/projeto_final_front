{"remainingRequest":"/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/src/components/Books/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/src/components/Books/Edit.vue","mtime":1574771660801},{"path":"/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aluno/Documentos/edu_project/django-vue/frontend-vue/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\"\nimport route from \"@/router/\"\nimport { validationMixin } from 'vuelidate'\n\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'EditBook',\n  created () {\n    this.getBookInfo()\n  },\n  mixins: [validationMixin],\n\n  validations: {\n    book: {\n      name: {\n        maxLength: maxLength(100),\n        required\n      },\n      description: {\n        required\n      },\n      author: {\n        required\n      },\n    }\n  },\n\n  data () {\n    return {\n      name: \"\",\n      author: \"\",\n      description: \"\",\n      book: {}\n    }\n  },\n  computed: {\n    nameErrors () {\n      const errors = []\n      if (!this.$v.book.name.$dirty) return errors\n      !this.$v.book.name.maxLength && errors.push('Name must be at most 100 characters long')\n      !this.$v.book.name.required && errors.push('Name is required.')\n      return errors\n    },\n    authorErrors () {\n      const errors = []\n      if (!this.$v.book.author.$dirty) return errors\n      !this.$v.book.author.required && errors.push('Author is required')\n      return errors\n    },\n    descriptionErrors () {\n      const errors = []\n      if (!this.$v.book.description.$dirty) return errors\n      !this.$v.book.description.required && errors.push('Description is required')\n      return errors\n    },\n  },\n  methods: {\n    getBookInfo() {\n      axios\n        .request({\n          baseURL: \"http://localhost:8000\",\n          method: \"get\",\n          url: `/api/books/get/${this.$route.params.id}/`\n        })\n        .then(res => {\n          this.book = res.data\n          console.log(res)\n        });\n    },\n    submit () {\n      axios\n        .put(\n          `http://localhost:8000/api/books/edit/${this.$route.params.id}/`,\n          this.book, \n          {\n            headers: {\n              Authorization: `Token ${this.$session.get(\"token\")}`\n            }\n          }\n        )\n        .then(res => {\n          route.push('/books/')\n          console.log(res)\n        });\n    },\n    clear () {\n      route.push('/books/')\n    },\n  }\n}\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/components/Books","sourcesContent":["<template>\n  <v-container>\n    <h1>Edit Book Info</h1>\n    <form>\n      <v-text-field\n        v-model=\"book.name\"\n        :error-messages=\"nameErrors\"\n        :counter=\"100\"\n        label=\"Name\"\n        required\n        @input=\"$v.book.name.$touch()\"\n        @blur=\"$v.book.name.$touch()\"\n      ></v-text-field>\n      <v-text-field\n        v-model=\"book.author\"\n        :error-messages=\"authorErrors\"\n        label=\"Author\"\n        required\n        @input=\"$v.book.author.$touch()\"\n        @blur=\"$v.book.author.$touch()\"\n      ></v-text-field>\n      <v-text-field\n        v-model=\"book.description\"\n        :error-messages=\"descriptionErrors\"\n        label=\"Description\"\n        required\n        @input=\"$v.book.description.$touch()\"\n        @blur=\"$v.book.description.$touch()\"\n      ></v-text-field>\n      <v-btn class=\"mr-4\" @click=\"submit\">Submit</v-btn>\n      <v-btn @click=\"clear\">Clear</v-btn>\n    </form>\n  </v-container>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport route from \"@/router/\"\nimport { validationMixin } from 'vuelidate'\n\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'EditBook',\n  created () {\n    this.getBookInfo()\n  },\n  mixins: [validationMixin],\n\n  validations: {\n    book: {\n      name: {\n        maxLength: maxLength(100),\n        required\n      },\n      description: {\n        required\n      },\n      author: {\n        required\n      },\n    }\n  },\n\n  data () {\n    return {\n      name: \"\",\n      author: \"\",\n      description: \"\",\n      book: {}\n    }\n  },\n  computed: {\n    nameErrors () {\n      const errors = []\n      if (!this.$v.book.name.$dirty) return errors\n      !this.$v.book.name.maxLength && errors.push('Name must be at most 100 characters long')\n      !this.$v.book.name.required && errors.push('Name is required.')\n      return errors\n    },\n    authorErrors () {\n      const errors = []\n      if (!this.$v.book.author.$dirty) return errors\n      !this.$v.book.author.required && errors.push('Author is required')\n      return errors\n    },\n    descriptionErrors () {\n      const errors = []\n      if (!this.$v.book.description.$dirty) return errors\n      !this.$v.book.description.required && errors.push('Description is required')\n      return errors\n    },\n  },\n  methods: {\n    getBookInfo() {\n      axios\n        .request({\n          baseURL: \"http://localhost:8000\",\n          method: \"get\",\n          url: `/api/books/get/${this.$route.params.id}/`\n        })\n        .then(res => {\n          this.book = res.data\n          console.log(res)\n        });\n    },\n    submit () {\n      axios\n        .put(\n          `http://localhost:8000/api/books/edit/${this.$route.params.id}/`,\n          this.book, \n          {\n            headers: {\n              Authorization: `Token ${this.$session.get(\"token\")}`\n            }\n          }\n        )\n        .then(res => {\n          route.push('/books/')\n          console.log(res)\n        });\n    },\n    clear () {\n      route.push('/books/')\n    },\n  }\n}\n</script>"]}]}